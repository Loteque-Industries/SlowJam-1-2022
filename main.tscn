[gd_scene load_steps=18 format=2]

[ext_resource path="res://Textures/sfknaeoa_2K_Albedo.jpg" type="Texture" id=1]
[ext_resource path="res://Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Terrain.gd" type="Script" id=3]
[ext_resource path="res://main.gd" type="Script" id=4]
[ext_resource path="res://PauseController.tscn" type="PackedScene" id=5]
[ext_resource path="res://UserInterface.tscn" type="PackedScene" id=6]
[ext_resource path="res://Goatinator.tscn" type="PackedScene" id=7]
[ext_resource path="res://Textures/T_GoatBase_Normal.png" type="Texture" id=8]
[ext_resource path="res://Textures/086_hdrmaps_com_free.exr" type="Texture" id=9]
[ext_resource path="res://sound/332323__foolboymedia__floating-in-the-midnight-breeze.wav" type="AudioStream" id=10]
[ext_resource path="res://sound/187499__waveplaysfx__sfx-eerie-glow.wav" type="AudioStream" id=11]
[ext_resource path="res://sound/400785__bonnyorbit__swiss-hills-with-animals-with-bells.wav" type="AudioStream" id=12]

[sub_resource type="SpatialMaterial" id=18]

[sub_resource type="Shader" id=19]
code = "// The MIT License
// Copyright Â© 2015 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// I didn't know if I should keep the license or not
 
shader_type spatial;
 
uniform sampler2D albedo : hint_albedo;
uniform sampler2D normalmap : hint_normal;
uniform float uv_scale;
 
vec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), 
                                              2.0+dot(p,vec2(11.0,47.0)),
                                              3.0+dot(p,vec2(41.0,29.0)),
                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }
 
vec4 textureNoTile( sampler2D samp, in vec2 uv )
{
    vec2 iuv = floor( uv );
    vec2 fuv = fract( uv );
 
 
    vec4 ofa = hash4( iuv + vec2(0.0,0.0) );
    vec4 ofb = hash4( iuv + vec2(1.0,0.0) );
    vec4 ofc = hash4( iuv + vec2(0.0,1.0) );
    vec4 ofd = hash4( iuv + vec2(1.0,1.0) );
    
    vec2 ddx = dFdx( uv );
    vec2 ddy = dFdy( uv );
 
    // transform per-tile uvs
    ofa.zw = sign(ofa.zw-0.5);
    ofb.zw = sign(ofb.zw-0.5);
    ofc.zw = sign(ofc.zw-0.5);
    ofd.zw = sign(ofd.zw-0.5);
    
    // uv's, and derivarives (for correct mipmapping)
    vec2 uva = uv*ofa.zw + ofa.xy; vec2 ddxa = ddx*ofa.zw; vec2 ddya = ddy*ofa.zw;
    vec2 uvb = uv*ofb.zw + ofb.xy; vec2 ddxb = ddx*ofb.zw; vec2 ddyb = ddy*ofb.zw;
    vec2 uvc = uv*ofc.zw + ofc.xy; vec2 ddxc = ddx*ofc.zw; vec2 ddyc = ddy*ofc.zw;
    vec2 uvd = uv*ofd.zw + ofd.xy; vec2 ddxd = ddx*ofd.zw; vec2 ddyd = ddy*ofd.zw;
        
    // fetch and blend
    vec2 b = smoothstep(0.25,0.75,fuv);
    
    return mix( mix( textureGrad( samp, uva, ddxa, ddya ), 
                     textureGrad( samp, uvb, ddxb, ddyb ), b.x ), 
                mix( textureGrad( samp, uvc, ddxc, ddyc ),
                     textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );
}
 
void fragment() {
    vec2 uv = UV * uv_scale;
    ALBEDO = textureNoTile(albedo, uv).rgb;
    NORMALMAP = textureNoTile(normalmap, uv).rgb;
    NORMALMAP_DEPTH = 3.0;
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 19 )
shader_param/uv_scale = 3.0
shader_param/albedo = ExtResource( 1 )
shader_param/normalmap = ExtResource( 8 )

[sub_resource type="PanoramaSky" id=20]
panorama = ExtResource( 9 )

[sub_resource type="Environment" id=21]
background_mode = 2
background_sky = SubResource( 20 )
ambient_light_color = Color( 0.501961, 0.501961, 0.501961, 1 )
ambient_light_energy = 0.08
ambient_light_sky_contribution = 0.7
fog_enabled = true
fog_color = Color( 0.592157, 0.603922, 0.611765, 1 )
fog_sun_color = Color( 1, 1, 1, 1 )
fog_depth_begin = 37.1
fog_depth_end = 151.2
fog_height_enabled = true
fog_height_max = -85.6
tonemap_mode = 2
tonemap_white = 5.79

[node name="main" type="Spatial"]
script = ExtResource( 4 )
select_material = SubResource( 18 )

[node name="MenuController" parent="." instance=ExtResource( 5 )]

[node name="UserInterface" parent="." instance=ExtResource( 6 )]
pause_mode = 1
mouse_filter = 2

[node name="Terrain" type="Spatial" parent="."]
pause_mode = 2
script = ExtResource( 3 )
material = SubResource( 17 )
noise_octaves = 1
noise_period = 20.0
noise_persistance = 0.7

[node name="Goatinator" parent="." instance=ExtResource( 7 )]
transform = Transform( 0.811503, 0, 0.584349, 0, 1, 0, -0.584349, 0, 0.811503, 0, 4.53555, -62.4153 )

[node name="Pulse" type="AudioStreamPlayer3D" parent="Goatinator"]
pause_mode = 2
stream = ExtResource( 11 )
unit_db = 6.0
max_db = 5.0
autoplay = true
max_distance = 100.0

[node name="Player" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.00813, -1.2265 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 21 )

[node name="Sun" type="DirectionalLight" parent="WorldEnvironment"]
transform = Transform( 0.819152, 0.196175, -0.538986, 0, 0.939693, 0.34202, 0.573577, -0.280167, 0.769751, 0, 9.41471, -62.4727 )
light_energy = 4.158
shadow_enabled = true
shadow_color = Color( 0.105882, 0, 0.113725, 1 )
directional_shadow_depth_range = 1
directional_shadow_max_distance = 400.0

[node name="BackgroudMusic" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 10 )
volume_db = -5.0
autoplay = true

[node name="BackgroundFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 12 )
autoplay = true
